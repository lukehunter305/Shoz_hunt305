 Java 8 Features & Functional Programming

What are Lambda Expressions in Java 8?
“A Lambda Expression in Java 8 is basically an anonymous function — it has no name, return type, or access modifier. It’s mainly used to represent the implementation of a functional interface in a concise way.

Explain the Stream API in Java 8.
“The Stream API in Java 8 is one of the most powerful features that allows us to process collections in a functional and declarative way.
Instead of using loops, we can perform operations like filtering, mapping, sorting, and collecting in a pipeline manner.

What is a Functional Interface? Provide an example.
Functional interfaces in Java are interfaces with just one abstract method. They are used to 
create lambda expressions and instances of these interfaces can be created with lambdas, 
method references, or constructor references. 

How does the default keyword work in interfaces?
“In Java 8, the default keyword lets us write method implementations inside interfaces.
It mainly provides backward compatibility — so old classes don’t break when new methods are added to interfaces.
Classes can use or override default methods, and if two interfaces have the same one, the class must resolve it explicitly.”

What is the CompletableFuture class in Java 8?
“CompletableFuture in Java 8 is an enhanced version of the Future interface that supports asynchronous, non-blocking programming.
Unlike traditional Future, it allows us to attach callbacks and chain multiple operations using methods like thenApply(), thenAccept(), and thenRun().

Explain the Optional class and its use cases.
“The Optional class in Java 8 is a container object that may or may not contain a non-null value.
It was introduced to reduce the chances of NullPointerException and make our code more readable and safe.
In real-world applications, Optional is very useful for handling database or API responses that might return null values.

What is the Method Reference feature in Java 8?
“Method Reference in Java 8 is a shorthand notation of Lambda Expressions that lets us directly refer to an existing method or constructor using the :: operator.

How does the DateTime API in Java 8 improve date and time handling?
“In Java 8, the new Date-Time API under the java.time package completely restructured how we handle dates and times.
The old Date and Calendar classes were mutable, confusing, and not thread-safe. The new API fixes all that — it’s immutable, thread-safe, and far more readable
===================================================================